{"version":3,"sources":["App/DataEditorPage/events-table.module.css","events-slice.js","store.js","App/routes.js","App/DataEditorPage/EventsTable.js","components/DateBox.js","components/constants.js","components/SelectBox.js","components/LazySelectSearch.js","components/WrappedComponents.js","App/DataEditorPage/validators.js","App/DataEditorPage/EventForm.js","App/DataEditorPage/routes.js","App/DataEditorPage/DataEditorPage.js","App/App.js","index.js"],"names":["module","exports","loadEvents","createAsyncThunk","async","response","fetch","process","json","eventsSlice","createSlice","initialState","eventTypes","persons","toponyms","events","name","reducers","editEvent","state","data","index","value","Object","entries","id","payload","deleteEvent","filter","event","addEvent","push","uniqueId","extraReducers","builder","addCase","fulfilled","action","otherFields","forEach","startDate","Date","endDate","orderBy","actions","eventsSelector","toponymsSelector","personsSelector","eventTypesSelector","eventsWithNestedDataSelector","createSelector","map","type","find","personId","person","toponymId","toponym","eventsComplexSelector","store","configureStore","reducer","rootReducer","editorDataPage","dateFormatter","date","toLocaleString","year","month","day","typeFormatter","personsFormatter","surname","patron","Boolean","join","toponymsFormatter","startDateSorter","a","b","endDateSorter","paginationOptions","defaultPageSize","pageSizeOptions","position","EventsTable","onSelect","deleteRow","onRow","useCallback","record","onClick","undefined","eventTypesFilter","useMemo","eventType","text","dataSource","rowKey","pagination","className","classNames","Column","title","dataIndex","width","sorter","render","filters","onFilter","_","onConfirm","stopPropagation","onCancel","okText","cancelText","DateBox","dateFormat","otherProps","format","ID_FACTORY","it","NAME_FACTORY","OPTIONS_DEFAULT_VALUE","SelectBox","options","optionKeyFactory","optionValueFactory","optionNameFactory","option","Option","DEFAULT_VALUE","LazySelectSearch","allOptions","onChange","placeholder","count","selectProps","filteredOptions","setFilteredOptions","useState","onSearch","debounce","inputValue","toLowerCase","includes","toLocaleLowerCase","onBlur","onChangeHandler","newValue","mappedValues","v","p","length","slice","uniq","hidedOptionsCount","mode","filterOption","disabled","wrapIntoField","Component","label","validate","allowNull","identity","parse","input","onFocus","meta","invalid","touched","error","Item","validateStatus","help","wrapIntoDebouncedInput","debounceTimeout","onChangeFormProps","viewValue","setViewValue","onChangeDebounced","updatedValue","target","WrappedTextArea","Input","TextArea","WrappedDateBox","WrappedSelectBox","WrappedLazySelectSearch","required","isNil","isArray","dateMoreThanOrEqual","fieldName","fieldLabel","allValues","isBefore","composeValidators","validators","reduce","validator","typeNameFactory","patronNameFactory","INITIAL_EVENT_VALUE","EventForm","onSubmit","onClose","useSelector","eventId","useParams","placement","visible","closable","destroyOnClose","style","minHeight","display","alignItems","justifyContent","size","Number","initialValues","moment","convertEventToFormFormat","values","handleSubmit","layout","onFinish","rows","isAfter","right","bottom","borderTop","padding","background","textAlign","htmlType","data-id","addRoute","editRoute","DataEditorPage","dispatch","useDispatch","history","useHistory","setFilter","complexData","denormalizedEvents","eventsWithNestedData","generatePath","closeForm","changeEvent","toDate","message","success","onDelete","createEvent","showAddForm","contentForExportButton","JSON","stringify","ghost","Search","extra","download","icon","href","URL","createObjectURL","Blob","Content","path","ROUTES","App","collapsed","setCollapsed","pathname","useLocation","selectedMenuKeys","route","useEffect","hasSider","Sider","theme","collapsible","onCollapse","overflow","height","left","selectedKeys","EditOutlined","to","marginLeft","transition","component","ReactDOM","locale","ruLocale","document","getElementById"],"mappings":"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","file":"static/js/main.83b72954.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"events-table\":\"events-table_events-table__2LXrx\"};","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { orderBy, uniqueId } from 'lodash-es';\n\nexport const loadEvents = createAsyncThunk('events/fetchEvents', async () => {\n  const response = await fetch(`${process.env.PUBLIC_URL}/events.json`);\n  const events = await response.json();\n  return events;\n});\n\nconst initialState = {\n  eventTypes: [],\n  persons: [],\n  toponyms: [],\n  events: [],\n};\n\nconst eventsSlice = createSlice({\n  initialState,\n  name: 'events',\n  reducers: {\n    editEvent: (state, data) => {\n      const { events } = state;\n\n      for (const [index, value] of Object.entries(events)) {\n        if (value.id === data.payload.id) {\n          events[index] = data.payload;\n          break;\n        }\n      }\n    },\n    deleteEvent: (state, data) => {\n      state.events = state.events.filter(\n        (event) => event.id !== data.payload.id,\n      );\n    },\n    addEvent: (state, data) => {\n      state.events.push({ ...data.payload, id: uniqueId() });\n    },\n  },\n  extraReducers(builder) {\n    builder.addCase(loadEvents.fulfilled, (state, action) => {\n      const { events, ...otherFields } = action.payload;\n\n      events.forEach((event) => {\n        event.startDate = new Date(event.startDate);\n        event.endDate = new Date(event.endDate);\n      });\n\n      return {\n        ...otherFields,\n        events: orderBy(\n          events,\n          (event) => event.endDate - event.startDate,\n          'desc',\n        ),\n      };\n    });\n  },\n});\n\nexport const { addEvent, deleteEvent, editEvent } = eventsSlice.actions;\n\nexport const eventsSelector = (state) => state.events;\nexport const toponymsSelector = (state) => state.toponyms;\nexport const personsSelector = (state) => state.persons;\nexport const eventTypesSelector = (state) => state.eventTypes;\n\nexport const eventsWithNestedDataSelector = createSelector(\n  eventsSelector,\n  toponymsSelector,\n  personsSelector,\n  eventTypesSelector,\n  (events, toponyms, persons, eventTypes) =>\n    events.map((event) => ({\n      ...event,\n      type: eventTypes.find((type) => type.id === event.type),\n      persons: event.persons\n        ? event.persons.map((personId) =>\n            persons.find((person) => person.id === personId),\n          )\n        : [],\n      toponyms: event.toponyms\n        ? event.toponyms.map((toponymId) =>\n            toponyms.find((toponym) => toponym.id === toponymId),\n          )\n        : [],\n    })),\n);\n\nexport const eventsComplexSelector = createSelector(\n  eventsSelector,\n  toponymsSelector,\n  personsSelector,\n  eventTypesSelector,\n  (events, toponyms, persons, eventTypes) => ({\n    events,\n    eventTypes,\n    toponyms,\n    persons,\n  }),\n);\n\nexport default eventsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './events-slice';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","export const editorDataPage = '/editor';\n","import { useCallback, useMemo } from 'react';\nimport { Button, Popconfirm, Table } from 'antd';\nimport classNames from './events-table.module.css';\n\nconst dateFormatter = (date) =>\n  date.toLocaleString('ru', {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n  });\n\nconst typeFormatter = (type) => type.type;\n\nconst personsFormatter = (persons) =>\n  persons\n    .map((person) =>\n      [person.surname, person.name, person.patron].filter(Boolean).join(' '),\n    )\n    .join(', ');\n\nconst toponymsFormatter = (toponyms) =>\n  toponyms.map((toponym) => toponym.name).join(', ');\n\nconst startDateSorter = (a, b) => a.startDate - b.startDate;\n\nconst endDateSorter = (a, b) => a.endDate - b.endDate;\n\nconst paginationOptions = {\n  defaultPageSize: 20,\n  pageSizeOptions: [20, 50, 100],\n  position: ['bottomCenter'],\n};\n\nconst EventsTable = ({ events, eventTypes, onSelect, deleteRow }) => {\n  const onRow = useCallback(\n    (record) => ({\n      onClick: onSelect ? () => onSelect(record) : undefined,\n    }),\n    [onSelect],\n  );\n\n  const eventTypesFilter = useMemo(\n    () =>\n      eventTypes.map((eventType) => ({\n        value: eventType.id,\n        text: eventType.type,\n      })),\n    [eventTypes],\n  );\n\n  const renderDeleteButton = (_, record) => (\n    <Popconfirm\n      title=\"Вы уверены?\"\n      onConfirm={(event) => {\n        event.stopPropagation();\n        deleteRow(record);\n      }}\n      onCancel={(event) => {\n        event.stopPropagation();\n      }}\n      okText=\"Да\"\n      cancelText=\"Нет\"\n    >\n      <Button\n        type=\"link\"\n        onClick={(event) => {\n          event.stopPropagation();\n        }}\n      >\n        Удалить\n      </Button>\n    </Popconfirm>\n  );\n\n  return (\n    <Table\n      dataSource={events}\n      rowKey={(event) => event.id}\n      onRow={onRow}\n      pagination={paginationOptions}\n      className={classNames['events-table']}\n    >\n      <Table.Column title=\"Название\" dataIndex=\"name\" width=\"35%\" />\n      <Table.Column\n        title=\"Дата начала\"\n        dataIndex=\"startDate\"\n        width=\"10%\"\n        sorter={startDateSorter}\n        render={dateFormatter}\n      />\n      <Table.Column\n        title=\"Дата окончания\"\n        dataIndex=\"endDate\"\n        width=\"10%\"\n        sorter={endDateSorter}\n        render={dateFormatter}\n      />\n      <Table.Column\n        title=\"Тип\"\n        dataIndex=\"type\"\n        width=\"10%\"\n        filters={eventTypesFilter}\n        onFilter={(value, record) => record.type.id === value}\n        render={typeFormatter}\n      />\n      <Table.Column\n        title=\"Действующие лица\"\n        dataIndex=\"persons\"\n        width=\"15%\"\n        render={personsFormatter}\n      />\n      <Table.Column\n        title=\"Топонимы\"\n        dataIndex=\"toponyms\"\n        width=\"15%\"\n        render={toponymsFormatter}\n      />\n      <Table.Column title=\"\" key=\"delete\" render={renderDeleteButton} />\n    </Table>\n  );\n};\n\nexport default EventsTable;\n","import { DatePicker } from 'antd';\n\nconst DEFAULT_DATE_FORMAT = 'DD.MM.YYYY';\n\nconst DateBox = ({ dateFormat = DEFAULT_DATE_FORMAT, ...otherProps }) => (\n  <DatePicker format={dateFormat} {...otherProps} />\n);\n\nexport default DateBox;\n","export const ID_FACTORY = (it) => it.id;\n\nexport const NAME_FACTORY = (it) => it.name;\n","import { Select } from 'antd';\nimport { ID_FACTORY, NAME_FACTORY } from './constants';\n\nconst OPTIONS_DEFAULT_VALUE = [];\n\nconst SelectBox = ({\n  options = OPTIONS_DEFAULT_VALUE,\n  optionKeyFactory = ID_FACTORY,\n  optionValueFactory = ID_FACTORY,\n  optionNameFactory = NAME_FACTORY,\n  ...otherProps\n}) => (\n  <Select {...otherProps}>\n    {options.map((option) => (\n      <Select.Option\n        key={optionKeyFactory(option)}\n        value={optionValueFactory(option)}\n      >\n        {optionNameFactory(option)}\n      </Select.Option>\n    ))}\n  </Select>\n);\nexport default SelectBox;\n","import { useCallback, useMemo, useState } from 'react';\nimport { debounce, uniq } from 'lodash-es';\nimport { Select } from 'antd';\nimport { ID_FACTORY, NAME_FACTORY } from './constants';\n\nconst DEFAULT_VALUE = [];\n\nconst LazySelectSearch = ({\n  allOptions,\n  value = DEFAULT_VALUE,\n  onChange,\n  placeholder,\n  count = 5,\n  optionKeyFactory = ID_FACTORY,\n  optionValueFactory = ID_FACTORY,\n  optionNameFactory = NAME_FACTORY,\n  ...selectProps\n}) => {\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onSearch = useCallback(\n    debounce((inputValue) => {\n      setFilteredOptions(\n        allOptions.filter((option) =>\n          optionNameFactory(option)\n            .toLowerCase()\n            .includes(inputValue.toLocaleLowerCase()),\n        ),\n      );\n    }, 300),\n    [allOptions],\n  );\n\n  const onBlur = useCallback(() => {\n    setFilteredOptions([]);\n  }, []);\n\n  const onChangeHandler = useCallback(\n    (newValue) => {\n      setFilteredOptions([]);\n      onChange(newValue);\n    },\n    [onChange],\n  );\n\n  const mappedValues = useMemo(\n    () => value.map((v) => allOptions.find((p) => optionValueFactory(p) === v)),\n    [allOptions, value, optionValueFactory],\n  );\n\n  const options = useMemo(\n    () =>\n      filteredOptions.length\n        ? filteredOptions.slice(0, count)\n        : uniq([...allOptions.slice(0, count), ...mappedValues]),\n    [allOptions, count, filteredOptions, mappedValues],\n  );\n  const hidedOptionsCount = useMemo(\n    () =>\n      filteredOptions.length\n        ? filteredOptions.length - count\n        : allOptions.length - options.length,\n    [allOptions, count, filteredOptions, options.length],\n  );\n\n  return (\n    <Select\n      {...selectProps}\n      placeholder={placeholder}\n      mode=\"multiple\"\n      filterOption={false}\n      onSearch={onSearch}\n      onChange={onChangeHandler}\n      onBlur={onBlur}\n      value={value}\n    >\n      {options.map((option) => (\n        <Select.Option\n          key={optionKeyFactory(option)}\n          value={optionValueFactory(option)}\n        >\n          {optionNameFactory(option)}\n        </Select.Option>\n      ))}\n      {hidedOptionsCount > 0 && (\n        <Select.Option\n          key=\"__hidedOptionsCount__\"\n          value=\"__hidedOptionsCount__\"\n          disabled\n        >\n          Еще {hidedOptionsCount} вариантов\n        </Select.Option>\n      )}\n    </Select>\n  );\n};\n\nexport default LazySelectSearch;\n","import { useCallback, useState } from 'react';\nimport { debounce, identity } from 'lodash-es';\nimport { Field } from 'react-final-form';\nimport { Form, Input } from 'antd';\nimport DateBox from './DateBox';\nimport SelectBox from './SelectBox';\nimport LazySelectSearch from './LazySelectSearch';\n\nconst wrapIntoField =\n  (Component) =>\n  ({\n    name,\n    label,\n    validate,\n    allowNull = true,\n    format = identity,\n    parse = identity,\n    ...otherProps\n  }) =>\n    (\n      <Field\n        name={name}\n        format={format}\n        parse={parse}\n        allowNull={allowNull}\n        validate={validate}\n      >\n        {({\n          input: { value, onChange, onBlur, onFocus },\n          meta: { invalid, touched, error },\n        }) => (\n          <Form.Item\n            label={label}\n            validateStatus={touched && invalid ? 'error' : 'success'}\n            help={touched && invalid ? error : undefined}\n          >\n            <Component\n              name={name}\n              value={value}\n              onChange={onChange}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              {...otherProps}\n            />\n          </Form.Item>\n        )}\n      </Field>\n    );\n\nconst wrapIntoDebouncedInput = (Component) =>\n  function DebouncedInput({\n    debounceTimeout = 300,\n    onChange: onChangeFormProps,\n    value,\n    ...otherProps\n  }) {\n    const [viewValue, setViewValue] = useState(value);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const onChangeDebounced = useCallback(\n      debounce((updatedValue) => {\n        onChangeFormProps(updatedValue);\n      }, debounceTimeout),\n      [],\n    );\n\n    const onChange = useCallback(\n      ({ target: { value: newValue } }) => {\n        setViewValue(newValue);\n        onChangeDebounced(newValue);\n      },\n      [onChangeDebounced],\n    );\n\n    return <Component value={viewValue} onChange={onChange} {...otherProps} />;\n  };\n\nconst WrappedInput = wrapIntoField(wrapIntoDebouncedInput(Input));\n\nconst WrappedTextArea = wrapIntoField(wrapIntoDebouncedInput(Input.TextArea));\n\nconst WrappedDateBox = wrapIntoField(DateBox);\n\nconst WrappedSelectBox = wrapIntoField(SelectBox);\n\nconst WrappedLazySelectSearch = wrapIntoField(LazySelectSearch);\n\nexport {\n  WrappedInput as Input,\n  WrappedTextArea as TextArea,\n  WrappedDateBox as DateBox,\n  WrappedSelectBox as SelectBox,\n  WrappedLazySelectSearch as LazySelectSearch,\n};\n","import { isArray, isNil } from 'lodash-es';\n\nexport const required = (value) =>\n  isNil(value) || value === '' || (isArray(value) && value.length === 0)\n    ? 'Поле обязательно'\n    : undefined;\n\nexport const dateLessThanOrEqual =\n  (fieldName, fieldLabel) => (value, allValues) =>\n    value.isAfter(allValues[fieldName], 'day')\n      ? `Значение поля должно быть меньше чем ${fieldLabel}`\n      : undefined;\n\nexport const dateMoreThanOrEqual =\n  (fieldName, fieldLabel) => (value, allValues) =>\n    value.isBefore(allValues[fieldName], 'day')\n      ? `Значение поля должно быть больше чем ${fieldLabel}`\n      : undefined;\n\nexport const moreThanOrEqual = (fieldName, fieldLabel) => (value, allValues) =>\n  value < allValues[fieldName]\n    ? `Значение поля должно быть больше чем ${fieldLabel}`\n    : undefined;\n\nexport const lessThanOrEqual = (fieldName, fieldLabel) => (value, allValues) =>\n  value > allValues[fieldName]\n    ? `Значение поля должно быть меньше чем ${fieldLabel}`\n    : undefined;\n\nexport const composeValidators =\n  (...validators) =>\n  (value, allValues, meta) =>\n    validators.reduce(\n      (error, validator) => error || validator(value, allValues, meta),\n      undefined,\n    );\n","import { useSelector } from 'react-redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { useParams } from 'react-router-dom';\nimport { Button, Drawer, Form, Spin } from 'antd';\nimport moment from 'moment';\nimport { DateBox, LazySelectSearch, SelectBox, TextArea } from 'components';\nimport {\n  eventsSelector,\n  eventTypesSelector,\n  personsSelector,\n  toponymsSelector,\n} from 'events-slice';\nimport {\n  composeValidators,\n  dateLessThanOrEqual,\n  dateMoreThanOrEqual,\n  required,\n} from './validators';\n\nconst typeNameFactory = (it) => it.type;\n\nconst patronNameFactory = (it) =>\n  [it.surname, it.name, it.patron].filter(Boolean).join(' ');\n\nconst convertEventToFormFormat = (event) => ({\n  ...event,\n  startDate: moment(event.startDate),\n  endDate: moment(event.endDate),\n});\n\nconst INITIAL_EVENT_VALUE = {\n  name: null,\n  startDate: null,\n  endDate: null,\n  type: null,\n  toponyms: [],\n  persons: [],\n};\n\nconst EventForm = ({ onSubmit, onClose, title }) => {\n  const eventTypes = useSelector(eventTypesSelector);\n  const toponyms = useSelector(toponymsSelector);\n  const persons = useSelector(personsSelector);\n  const events = useSelector(eventsSelector);\n  const { id: eventId } = useParams();\n\n  if (events.length < 1) {\n    return (\n      <Drawer\n        title={title}\n        onClose={onClose}\n        placement=\"right\"\n        width={450}\n        visible\n        closable\n        destroyOnClose\n      >\n        <div\n          style={{\n            minHeight: 200,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Spin size=\"large\" />\n        </div>\n      </Drawer>\n    );\n  }\n\n  const event = events.find((it) => it.id === Number(eventId));\n\n  const initialValues = event\n    ? convertEventToFormFormat(event)\n    : INITIAL_EVENT_VALUE;\n\n  return (\n    <Drawer\n      title={title}\n      onClose={onClose}\n      placement=\"right\"\n      width={450}\n      visible\n      closable\n      destroyOnClose\n    >\n      <FinalForm\n        initialValues={initialValues}\n        onSubmit={(values) => {\n          onSubmit(values);\n        }}\n      >\n        {({ handleSubmit }) => (\n          <Form layout=\"vertical\" onFinish={handleSubmit}>\n            <Form.Item>\n              <TextArea\n                name=\"name\"\n                label=\"Название\"\n                rows={4}\n                placeholder=\"Название\"\n                validate={required}\n              />\n            </Form.Item>\n            <Form.Item>\n              <DateBox\n                name=\"startDate\"\n                label=\"Дата начала\"\n                validate={composeValidators(\n                  required,\n                  dateLessThanOrEqual('endDate', 'Дата окончания'),\n                )}\n              />\n            </Form.Item>\n            <Form.Item>\n              <DateBox\n                name=\"endDate\"\n                label=\"Дата окончания\"\n                validate={composeValidators(\n                  required,\n                  dateMoreThanOrEqual('startDate', 'Дата начала'),\n                )}\n              />\n            </Form.Item>\n            <Form.Item>\n              <SelectBox\n                name=\"type\"\n                label=\"Тип\"\n                options={eventTypes}\n                optionNameFactory={typeNameFactory}\n                validate={required}\n              />\n            </Form.Item>\n            <Form.Item>\n              <LazySelectSearch\n                name=\"toponyms\"\n                label=\"Топонимы\"\n                allOptions={toponyms}\n                placeholder=\"Выберите топонимы\"\n              />\n            </Form.Item>\n            <Form.Item>\n              <LazySelectSearch\n                name=\"persons\"\n                label=\"Действующие лица\"\n                allOptions={persons}\n                optionNameFactory={patronNameFactory}\n                placeholder=\"Выберите действующих лиц\"\n              />\n            </Form.Item>\n            <div\n              style={{\n                position: 'absolute',\n                right: 0,\n                bottom: 0,\n                width: '100%',\n                borderTop: '1px solid #e9e9e9',\n                padding: '10px 16px',\n                background: '#fff',\n                textAlign: 'right',\n              }}\n            >\n              <Button htmlType=\"submit\" type=\"primary\" data-id=\"save-button\">\n                Сохранить\n              </Button>\n            </div>\n          </Form>\n        )}\n      </FinalForm>\n    </Drawer>\n  );\n};\n\nexport default EventForm;\n","import { editorDataPage } from 'App/routes';\n\nexport const addRoute = `${editorDataPage}/add`;\n\nexport const editRoute = `${editorDataPage}/edit/:id`;\n","import { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { generatePath, Route, useHistory } from 'react-router-dom';\nimport { Button, Input, Layout, message, PageHeader } from 'antd';\nimport DownloadOutlined from '@ant-design/icons/DownloadOutlined';\nimport PlusOutlined from '@ant-design/icons/PlusOutlined';\nimport { uniqueId } from 'lodash-es';\nimport {\n  addEvent,\n  deleteEvent,\n  editEvent,\n  eventsComplexSelector,\n  eventsWithNestedDataSelector,\n  eventTypesSelector,\n} from 'events-slice';\nimport { editorDataPage } from 'App/routes';\nimport EventsTable from './EventsTable';\nimport EventForm from './EventForm';\nimport { addRoute, editRoute } from './routes';\n\nconst DataEditorPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [filter, setFilter] = useState('');\n  const eventTypes = useSelector(eventTypesSelector);\n  const complexData = useSelector(eventsComplexSelector);\n  const denormalizedEvents = useSelector(eventsWithNestedDataSelector);\n  const eventsWithNestedData = useMemo(\n    () =>\n      denormalizedEvents.filter((it) =>\n        it.name.toLowerCase().includes(filter.toLowerCase()),\n      ),\n    [denormalizedEvents, filter],\n  );\n\n  const onSelect = useCallback(\n    (value) => {\n      history.push(generatePath(editRoute, { id: value.id }));\n    },\n    [history],\n  );\n\n  const closeForm = useCallback(() => {\n    history.push(editorDataPage);\n  }, [history]);\n\n  const changeEvent = useCallback(\n    (value) => {\n      dispatch(\n        editEvent({\n          ...value,\n          endDate: value.endDate.toDate(),\n          startDate: value.startDate.toDate(),\n        }),\n      );\n      closeForm();\n      message.success('Событие успешно изменено');\n    },\n    [dispatch, closeForm],\n  );\n\n  const onDelete = useCallback(\n    (value) => {\n      dispatch(deleteEvent(value));\n    },\n    [dispatch],\n  );\n\n  const createEvent = useCallback(\n    (value) => {\n      dispatch(\n        addEvent({\n          ...value,\n          id: uniqueId(),\n          endDate: value.endDate.toDate(),\n          startDate: value.startDate.toDate(),\n        }),\n      );\n      closeForm();\n      message.success('Событие успешно добавлено');\n    },\n    [closeForm, dispatch],\n  );\n\n  const showAddForm = useCallback(() => {\n    history.push(addRoute);\n  }, [history]);\n\n  const contentForExportButton = useMemo(\n    () => JSON.stringify(complexData),\n    [complexData],\n  );\n\n  return (\n    <Layout>\n      <PageHeader\n        ghost={false}\n        title={\n          <Input.Search\n            placeholder=\"Введите значение для поиска\"\n            onSearch={setFilter}\n            style={{ width: 400 }}\n            data-id=\"search\"\n          />\n        }\n        extra={\n          <>\n            <Button\n              data-id=\"export-button\"\n              download=\"events.json\"\n              icon={<DownloadOutlined />}\n              href={URL.createObjectURL(\n                new Blob([contentForExportButton], {\n                  type: 'application/json',\n                }),\n              )}\n            >\n              Экспортировать\n            </Button>\n            <Button\n              type=\"primary\"\n              onClick={showAddForm}\n              data-id=\"add-button\"\n              icon={<PlusOutlined />}\n            >\n              Добавить\n            </Button>\n          </>\n        }\n      />\n      <Layout.Content>\n        <EventsTable\n          events={eventsWithNestedData}\n          eventTypes={eventTypes}\n          onSelect={onSelect}\n          deleteRow={onDelete}\n        />\n        <Route\n          path={addRoute}\n          render={() => (\n            <EventForm\n              onClose={closeForm}\n              onSubmit={createEvent}\n              title=\"Добавление события\"\n            />\n          )}\n        />\n        <Route\n          path={editRoute}\n          render={() => (\n            <EventForm\n              onClose={closeForm}\n              onSubmit={changeEvent}\n              title=\"Редактирование события\"\n            />\n          )}\n        />\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default DataEditorPage;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link, Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport { EditOutlined } from '@ant-design/icons';\nimport { loadEvents } from '../events-slice';\nimport DataEditorPage from './DataEditorPage';\nimport { editorDataPage } from './routes';\n\nconst ROUTES = [editorDataPage];\n\nconst FULL_SLIDER_WIDTH = 240;\n\nconst App = () => {\n  const [collapsed, setCollapsed] = useState(true);\n  const dispatch = useDispatch();\n  const { pathname } = useLocation();\n\n  const selectedMenuKeys = useMemo(\n    () => [ROUTES.find((route) => route === pathname)],\n    [pathname],\n  );\n\n  useEffect(() => {\n    dispatch(loadEvents());\n  }, [dispatch]);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }} hasSider>\n      <Layout.Sider\n        theme=\"dark\"\n        collapsible\n        width={FULL_SLIDER_WIDTH}\n        collapsed={collapsed}\n        onCollapse={setCollapsed}\n        style={{\n          overflow: 'auto',\n          height: '100vh',\n          position: 'fixed',\n          left: 0,\n        }}\n      >\n        <Menu theme=\"dark\" mode=\"inline\" selectedKeys={selectedMenuKeys}>\n          <Menu.Item key={editorDataPage} icon={<EditOutlined />}>\n            <Link to={editorDataPage}>Редактирование данных</Link>\n          </Menu.Item>\n        </Menu>\n      </Layout.Sider>\n      <Layout\n        style={{\n          marginLeft: collapsed ? 80 : FULL_SLIDER_WIDTH,\n          transition: 'margin 0.2s',\n        }}\n      >\n        <Layout.Content>\n          <Switch>\n            <Route path={editorDataPage} component={DataEditorPage} />\n            <Redirect to={editorDataPage} />\n          </Switch>\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ConfigProvider } from 'antd';\nimport ruLocale from 'antd/lib/locale/ru_RU';\nimport store from './store';\nimport App from './App/App';\nimport './index.css';\n\nconst renderApp = () => (\n  <Router>\n    <Provider store={store}>\n      <ConfigProvider locale={ruLocale}>\n        <App />\n      </ConfigProvider>\n    </Provider>\n  </Router>\n);\n\nReactDOM.render(renderApp(), document.getElementById('root'));\n"],"sourceRoot":""}