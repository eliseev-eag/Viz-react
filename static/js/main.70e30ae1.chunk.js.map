{"version":3,"sources":["ducks.js","store.js","selectors.js","App/routes.js","App/DataEditorPage/EventsTable.js","components/DateBox.js","components/constants.js","components/SelectBox.js","components/LazySelectSearch.js","components/WrappedComponents.js","App/DataEditorPage/validators.js","App/DataEditorPage/EventForm.js","App/DataEditorPage/routes.js","App/DataEditorPage/DataEditorPage.js","App/App.js","index.js"],"names":["loadEventsRequest","createAction","loadEventsSuccess","loadEventsFailure","editEvent","deleteEvent","addEvent","combineReducers","isFetching","handleActions","combineActions","error","state","data","eventTypes","payload","persons","toponyms","events","orderBy","map","event","startDate","Date","endDate","id","filter","uniqueId","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","eventsSelector","toponymsSelector","personsSelector","eventTypesSelector","editorDataPage","dateFormatter","date","toLocaleString","year","month","day","typeFormatter","type","personsFormatter","person","surname","name","patron","join","toponymsFormatter","toponym","startDateSorter","a","b","endDateSorter","EventsTable","onSelect","deleteRow","onRow","useCallback","record","onClick","undefined","eventTypesFilter","useMemo","eventType","value","text","dataSource","rowKey","Column","title","dataIndex","width","sorter","render","filters","onFilter","_","onConfirm","stopPropagation","onCancel","okText","cancelText","DateBox","dateFormat","otherProps","format","ID_FACTORY","it","NAME_FACTORY","OPTIONS_DEFAULT_VALUE","SelectBox","options","optionKeyFactory","optionValueFactory","optionNameFactory","option","Option","DEFAULT_VALUE","LazySelectSearch","allOptions","onChange","placeholder","count","selectProps","filteredOptions","setFilteredOptions","useState","onSearch","debounce","inputValue","toLowerCase","includes","toLocaleLowerCase","onBlur","onChangeHandler","newValue","mappedValues","v","find","p","length","slice","uniq","hidedOptionsCount","mode","filterOption","disabled","wrapIntoField","Component","label","validate","allowNull","identity","parse","input","onFocus","meta","invalid","touched","Item","validateStatus","help","wrapIntoDebouncedInput","debounceTimeout","onChangeFormProps","viewValue","setViewValue","onChangeDebounced","updatedValue","target","WrappedTextArea","Input","TextArea","WrappedDateBox","WrappedSelectBox","WrappedLazySelectSearch","required","isNil","isArray","dateMoreThanOrEqual","fieldName","fieldLabel","allValues","isBefore","composeValidators","validators","reduce","validator","typeNameFactory","patronNameFactory","Boolean","INITIAL_EVENT_VALUE","EventForm","onSubmit","onClose","useSelector","eventId","useParams","placement","visible","closable","destroyOnClose","style","minHeight","display","alignItems","justifyContent","size","Number","initialValues","moment","convertEventToFormFormat","values","handleSubmit","layout","onFinish","rows","isAfter","position","right","bottom","borderTop","padding","background","textAlign","htmlType","data-id","addRoute","editRoute","DataEditorPage","dispatch","useDispatch","history","useHistory","setFilter","eventsWithNestedData","personId","toponymId","push","generatePath","closeForm","changeEvent","toDate","message","success","onDelete","createEvent","showAddForm","contentForExportButton","JSON","stringify","ghost","Search","extra","download","href","URL","createObjectURL","Blob","Content","path","ROUTES","App","collapsed","setCollapsed","pathname","useLocation","selectedMenuKeys","route","useEffect","async","eventsData","hasSider","Sider","theme","collapsible","onCollapse","overflow","height","left","selectedKeys","to","EditOutlined","marginLeft","transition","component","ReactDOM","locale","ruLocale","document","getElementById"],"mappings":"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","file":"static/js/main.70e30ae1.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { combineActions, createAction, handleActions } from 'redux-actions';\nimport { orderBy, uniqueId } from 'lodash-es';\n\nconst loadEventsRequest = createAction('loadEventsRequest');\nconst loadEventsSuccess = createAction('loadEventsSuccess');\nconst loadEventsFailure = createAction('loadEventsFailure');\n\nexport const loadEvents = () => async (dispatch) => {\n  dispatch(loadEventsRequest());\n  try {\n    const eventsData = await import('./events.json');\n    dispatch(loadEventsSuccess(eventsData));\n  } catch (error) {\n    dispatch(loadEventsFailure(error));\n  }\n};\n\nexport const editEvent = createAction('editEvent');\nexport const deleteEvent = createAction('deleteEvent');\nexport const addEvent = createAction('addEvent');\n\nexport default combineReducers({\n  isFetching: handleActions(\n    {\n      [loadEventsRequest]: () => true,\n      [combineActions(loadEventsSuccess, loadEventsFailure)]: () => false,\n    },\n    false,\n  ),\n  error: handleActions(\n    {\n      [loadEventsRequest]: () => null,\n      [loadEventsFailure]: (state, data) => data,\n    },\n    null,\n  ),\n  eventTypes: handleActions(\n    {\n      [loadEventsSuccess]: (state, data) => data.payload.eventTypes,\n    },\n    [],\n  ),\n  persons: handleActions(\n    {\n      [loadEventsSuccess]: (state, data) => data.payload.persons,\n    },\n    [],\n  ),\n  toponyms: handleActions(\n    {\n      [loadEventsSuccess]: (state, data) => data.payload.toponyms,\n    },\n    [],\n  ),\n  events: handleActions(\n    {\n      [loadEventsSuccess]: (state, data) =>\n        orderBy(\n          data.payload.events.map((event) => ({\n            ...event,\n            startDate: new Date(event.startDate),\n            endDate: new Date(event.endDate),\n          })),\n          (event) => event.endDate - event.startDate,\n          'desc',\n        ),\n      [editEvent]: (state, data) =>\n        state.map((event) =>\n          event.id === data.payload.id ? data.payload : event,\n        ),\n      [deleteEvent]: (state, data) =>\n        state.filter((event) => event.id !== data.payload.id),\n      [addEvent]: (state, data) => [\n        ...state,\n        { ...data.payload, id: uniqueId() },\n      ],\n    },\n    [],\n  ),\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './ducks';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","export const eventsSelector = (state) => state.events;\nexport const toponymsSelector = (state) => state.toponyms;\nexport const personsSelector = (state) => state.persons;\nexport const eventTypesSelector = (state) => state.eventTypes;\nexport const isFetchingSelector = (state) => state.isFetching;\nexport const errorSelector = (state) => state.error;\n","export const editorDataPage = '/editor';\n","import { useCallback, useMemo } from 'react';\nimport { Button, Popconfirm, Table } from 'antd';\n\nconst dateFormatter = (date) =>\n  date.toLocaleString('ru', {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n  });\n\nconst typeFormatter = (type) => type.type;\n\nconst personsFormatter = (persons) =>\n  persons\n    .map((person) => `${person.surname} ${person.name} ${person.patron}`)\n    .join();\n\nconst toponymsFormatter = (toponyms) =>\n  toponyms.map((toponym) => toponym.name).join();\n\nconst startDateSorter = (a, b) => a.startDate - b.startDate;\n\nconst endDateSorter = (a, b) => a.endDate - b.endDate;\n\nconst EventsTable = ({ events, eventTypes, onSelect, deleteRow }) => {\n  const onRow = useCallback(\n    (record) => ({\n      onClick: onSelect ? () => onSelect(record) : undefined,\n    }),\n    [onSelect],\n  );\n\n  const eventTypesFilter = useMemo(\n    () =>\n      eventTypes.map((eventType) => ({\n        value: eventType.id,\n        text: eventType.type,\n      })),\n    [eventTypes],\n  );\n\n  const renderDeleteButton = (_, record) => (\n    <Popconfirm\n      title=\"Вы уверены?\"\n      onConfirm={(event) => {\n        event.stopPropagation();\n        deleteRow(record);\n      }}\n      onCancel={(event) => {\n        event.stopPropagation();\n      }}\n      okText=\"Да\"\n      cancelText=\"Нет\"\n    >\n      <Button\n        type=\"link\"\n        onClick={(event) => {\n          event.stopPropagation();\n        }}\n      >\n        Удалить\n      </Button>\n    </Popconfirm>\n  );\n\n  return (\n    <Table dataSource={events} rowKey={(event) => event.id} onRow={onRow}>\n      <Table.Column title=\"Название\" dataIndex=\"name\" width=\"35%\" />\n      <Table.Column\n        title=\"Дата начала\"\n        dataIndex=\"startDate\"\n        width=\"10%\"\n        sorter={startDateSorter}\n        render={dateFormatter}\n      />\n      <Table.Column\n        title=\"Дата окончания\"\n        dataIndex=\"endDate\"\n        width=\"10%\"\n        sorter={endDateSorter}\n        render={dateFormatter}\n      />\n      <Table.Column\n        title=\"Тип\"\n        dataIndex=\"type\"\n        width=\"10%\"\n        filters={eventTypesFilter}\n        onFilter={(value, record) => record.type.id === value}\n        render={typeFormatter}\n      />\n      <Table.Column\n        title=\"Действующие лица\"\n        dataIndex=\"persons\"\n        width=\"15%\"\n        render={personsFormatter}\n      />\n      <Table.Column\n        title=\"Топонимы\"\n        dataIndex=\"toponyms\"\n        width=\"15%\"\n        render={toponymsFormatter}\n      />\n      <Table.Column title=\"\" key=\"delete\" render={renderDeleteButton} />\n    </Table>\n  );\n};\n\nexport default EventsTable;\n","import { DatePicker } from 'antd';\n\nconst DEFAULT_DATE_FORMAT = 'DD.MM.YYYY';\n\nconst DateBox = ({ dateFormat = DEFAULT_DATE_FORMAT, ...otherProps }) => (\n  <DatePicker format={dateFormat} {...otherProps} />\n);\n\nexport default DateBox;\n","export const ID_FACTORY = (it) => it.id;\n\nexport const NAME_FACTORY = (it) => it.name;\n","import { Select } from 'antd';\nimport { ID_FACTORY, NAME_FACTORY } from './constants';\n\nconst OPTIONS_DEFAULT_VALUE = [];\n\nconst SelectBox = ({\n  options = OPTIONS_DEFAULT_VALUE,\n  optionKeyFactory = ID_FACTORY,\n  optionValueFactory = ID_FACTORY,\n  optionNameFactory = NAME_FACTORY,\n  ...otherProps\n}) => (\n  <Select {...otherProps}>\n    {options.map((option) => (\n      <Select.Option\n        key={optionKeyFactory(option)}\n        value={optionValueFactory(option)}\n      >\n        {optionNameFactory(option)}\n      </Select.Option>\n    ))}\n  </Select>\n);\nexport default SelectBox;\n","import { useCallback, useMemo, useState } from 'react';\nimport { debounce, uniq } from 'lodash-es';\nimport { Select } from 'antd';\nimport { ID_FACTORY, NAME_FACTORY } from './constants';\n\nconst DEFAULT_VALUE = [];\n\nconst LazySelectSearch = ({\n  allOptions,\n  value = DEFAULT_VALUE,\n  onChange,\n  placeholder,\n  count = 5,\n  optionKeyFactory = ID_FACTORY,\n  optionValueFactory = ID_FACTORY,\n  optionNameFactory = NAME_FACTORY,\n  ...selectProps\n}) => {\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onSearch = useCallback(\n    debounce((inputValue) => {\n      setFilteredOptions(\n        allOptions.filter((option) =>\n          optionNameFactory(option)\n            .toLowerCase()\n            .includes(inputValue.toLocaleLowerCase()),\n        ),\n      );\n    }, 300),\n    [allOptions],\n  );\n\n  const onBlur = useCallback(() => {\n    setFilteredOptions([]);\n  }, []);\n\n  const onChangeHandler = useCallback(\n    (newValue) => {\n      setFilteredOptions([]);\n      onChange(newValue);\n    },\n    [onChange],\n  );\n\n  const mappedValues = useMemo(\n    () => value.map((v) => allOptions.find((p) => optionValueFactory(p) === v)),\n    [allOptions, value, optionValueFactory],\n  );\n\n  const options = useMemo(\n    () =>\n      filteredOptions.length\n        ? filteredOptions.slice(0, count)\n        : uniq([...allOptions.slice(0, count), ...mappedValues]),\n    [allOptions, count, filteredOptions, mappedValues],\n  );\n  const hidedOptionsCount = useMemo(\n    () =>\n      filteredOptions.length\n        ? filteredOptions.length - count\n        : allOptions.length - options.length,\n    [allOptions, count, filteredOptions, options.length],\n  );\n\n  return (\n    <Select\n      {...selectProps}\n      placeholder={placeholder}\n      mode=\"multiple\"\n      filterOption={false}\n      onSearch={onSearch}\n      onChange={onChangeHandler}\n      onBlur={onBlur}\n      value={value}\n    >\n      {options.map((option) => (\n        <Select.Option\n          key={optionKeyFactory(option)}\n          value={optionValueFactory(option)}\n        >\n          {optionNameFactory(option)}\n        </Select.Option>\n      ))}\n      {hidedOptionsCount > 0 && (\n        <Select.Option\n          key=\"__hidedOptionsCount__\"\n          value=\"__hidedOptionsCount__\"\n          disabled\n        >\n          Еще {hidedOptionsCount} вариантов\n        </Select.Option>\n      )}\n    </Select>\n  );\n};\n\nexport default LazySelectSearch;\n","import { useCallback, useState } from 'react';\nimport { debounce, identity } from 'lodash-es';\nimport { Field } from 'react-final-form';\nimport { Form, Input } from 'antd';\nimport DateBox from './DateBox';\nimport SelectBox from './SelectBox';\nimport LazySelectSearch from './LazySelectSearch';\n\nconst wrapIntoField =\n  (Component) =>\n  ({\n    name,\n    label,\n    validate,\n    allowNull = true,\n    format = identity,\n    parse = identity,\n    ...otherProps\n  }) =>\n    (\n      <Field\n        name={name}\n        format={format}\n        parse={parse}\n        allowNull={allowNull}\n        validate={validate}\n      >\n        {({\n          input: { value, onChange, onBlur, onFocus },\n          meta: { invalid, touched, error },\n        }) => (\n          <Form.Item\n            label={label}\n            validateStatus={touched && invalid ? 'error' : 'success'}\n            help={touched && invalid ? error : undefined}\n          >\n            <Component\n              name={name}\n              value={value}\n              onChange={onChange}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              {...otherProps}\n            />\n          </Form.Item>\n        )}\n      </Field>\n    );\n\nconst wrapIntoDebouncedInput = (Component) =>\n  function DebouncedInput({\n    debounceTimeout = 300,\n    onChange: onChangeFormProps,\n    value,\n    ...otherProps\n  }) {\n    const [viewValue, setViewValue] = useState(value);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const onChangeDebounced = useCallback(\n      debounce((updatedValue) => {\n        onChangeFormProps(updatedValue);\n      }, debounceTimeout),\n      [],\n    );\n\n    const onChange = useCallback(\n      ({ target: { value: newValue } }) => {\n        setViewValue(newValue);\n        onChangeDebounced(newValue);\n      },\n      [onChangeDebounced],\n    );\n\n    return <Component value={viewValue} onChange={onChange} {...otherProps} />;\n  };\n\nconst WrappedInput = wrapIntoField(wrapIntoDebouncedInput(Input));\n\nconst WrappedTextArea = wrapIntoField(wrapIntoDebouncedInput(Input.TextArea));\n\nconst WrappedDateBox = wrapIntoField(DateBox);\n\nconst WrappedSelectBox = wrapIntoField(SelectBox);\n\nconst WrappedLazySelectSearch = wrapIntoField(LazySelectSearch);\n\nexport {\n  WrappedInput as Input,\n  WrappedTextArea as TextArea,\n  WrappedDateBox as DateBox,\n  WrappedSelectBox as SelectBox,\n  WrappedLazySelectSearch as LazySelectSearch,\n};\n","import { isArray, isNil } from 'lodash-es';\n\nexport const required = (value) =>\n  isNil(value) || value === '' || (isArray(value) && value.length === 0)\n    ? 'Поле обязательно'\n    : undefined;\n\nexport const dateLessThanOrEqual =\n  (fieldName, fieldLabel) => (value, allValues) =>\n    value.isAfter(allValues[fieldName], 'day')\n      ? `Значение поля должно быть меньше чем ${fieldLabel}`\n      : undefined;\n\nexport const dateMoreThanOrEqual =\n  (fieldName, fieldLabel) => (value, allValues) =>\n    value.isBefore(allValues[fieldName], 'day')\n      ? `Значение поля должно быть больше чем ${fieldLabel}`\n      : undefined;\n\nexport const moreThanOrEqual = (fieldName, fieldLabel) => (value, allValues) =>\n  value < allValues[fieldName]\n    ? `Значение поля должно быть больше чем ${fieldLabel}`\n    : undefined;\n\nexport const lessThanOrEqual = (fieldName, fieldLabel) => (value, allValues) =>\n  value > allValues[fieldName]\n    ? `Значение поля должно быть меньше чем ${fieldLabel}`\n    : undefined;\n\nexport const composeValidators =\n  (...validators) =>\n  (value, allValues, meta) =>\n    validators.reduce(\n      (error, validator) => error || validator(value, allValues, meta),\n      undefined,\n    );\n","import { useSelector } from 'react-redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport { useParams } from 'react-router-dom';\nimport { Button, Drawer, Form, Spin } from 'antd';\nimport moment from 'moment';\nimport { DateBox, LazySelectSearch, SelectBox, TextArea } from 'components';\nimport {\n  eventsSelector,\n  eventTypesSelector,\n  personsSelector,\n  toponymsSelector,\n} from 'selectors';\nimport {\n  composeValidators,\n  dateLessThanOrEqual,\n  dateMoreThanOrEqual,\n  required,\n} from './validators';\n\nconst typeNameFactory = (it) => it.type;\n\nconst patronNameFactory = (it) =>\n  [it.surname, it.name, it.patron].filter(Boolean).join(' ');\n\nconst convertEventToFormFormat = (event) => ({\n  ...event,\n  startDate: moment(event.startDate),\n  endDate: moment(event.endDate),\n});\n\nconst INITIAL_EVENT_VALUE = {\n  name: null,\n  startDate: null,\n  endDate: null,\n  type: null,\n  toponyms: [],\n  persons: [],\n};\n\nconst EventForm = ({ onSubmit, onClose, title }) => {\n  const eventTypes = useSelector(eventTypesSelector);\n  const toponyms = useSelector(toponymsSelector);\n  const persons = useSelector(personsSelector);\n  const events = useSelector(eventsSelector);\n  const { id: eventId } = useParams();\n\n  if (events.length < 1) {\n    return (\n      <Drawer\n        title={title}\n        onClose={onClose}\n        placement=\"right\"\n        width={450}\n        visible\n        closable\n        destroyOnClose\n      >\n        <div\n          style={{\n            minHeight: 200,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Spin size=\"large\" />\n        </div>\n      </Drawer>\n    );\n  }\n\n  const event = events.find((it) => it.id === Number(eventId));\n\n  const initialValues = event\n    ? convertEventToFormFormat(event)\n    : INITIAL_EVENT_VALUE;\n\n  return (\n    <Drawer\n      title={title}\n      onClose={onClose}\n      placement=\"right\"\n      width={450}\n      visible\n      closable\n      destroyOnClose\n    >\n      <FinalForm\n        initialValues={initialValues}\n        onSubmit={(values) => {\n          onSubmit(values);\n        }}\n      >\n        {({ handleSubmit }) => (\n          <Form layout=\"vertical\" onFinish={handleSubmit}>\n            <Form.Item>\n              <TextArea\n                name=\"name\"\n                label=\"Название\"\n                rows={4}\n                placeholder=\"Название\"\n                validate={required}\n              />\n            </Form.Item>\n            <Form.Item>\n              <DateBox\n                name=\"startDate\"\n                label=\"Дата начала\"\n                validate={composeValidators(\n                  required,\n                  dateLessThanOrEqual('endDate', 'Дата окончания'),\n                )}\n              />\n            </Form.Item>\n            <Form.Item>\n              <DateBox\n                name=\"endDate\"\n                label=\"Дата окончания\"\n                validate={composeValidators(\n                  required,\n                  dateMoreThanOrEqual('startDate', 'Дата начала'),\n                )}\n              />\n            </Form.Item>\n            <Form.Item>\n              <SelectBox\n                name=\"type\"\n                label=\"Тип\"\n                options={eventTypes}\n                optionNameFactory={typeNameFactory}\n                validate={required}\n              />\n            </Form.Item>\n            <Form.Item>\n              <LazySelectSearch\n                name=\"toponyms\"\n                label=\"Топонимы\"\n                allOptions={toponyms}\n                placeholder=\"Выберите топонимы\"\n              />\n            </Form.Item>\n            <Form.Item>\n              <LazySelectSearch\n                name=\"persons\"\n                label=\"Действующие лица\"\n                allOptions={persons}\n                optionNameFactory={patronNameFactory}\n                placeholder=\"Выберите действующих лиц\"\n              />\n            </Form.Item>\n            <div\n              style={{\n                position: 'absolute',\n                right: 0,\n                bottom: 0,\n                width: '100%',\n                borderTop: '1px solid #e9e9e9',\n                padding: '10px 16px',\n                background: '#fff',\n                textAlign: 'right',\n              }}\n            >\n              <Button htmlType=\"submit\" type=\"primary\" data-id=\"save-button\">\n                Сохранить\n              </Button>\n            </div>\n          </Form>\n        )}\n      </FinalForm>\n    </Drawer>\n  );\n};\n\nexport default EventForm;\n","import { editorDataPage } from 'App/routes';\n\nexport const addRoute = `${editorDataPage}/add`;\n\nexport const editRoute = `${editorDataPage}/edit/:id`;\n","import { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { generatePath, Route, useHistory } from 'react-router-dom';\nimport { Button, Input, Layout, message, PageHeader } from 'antd';\nimport DownloadOutlined from '@ant-design/icons/DownloadOutlined';\nimport { uniqueId } from 'lodash-es';\nimport { addEvent, deleteEvent, editEvent } from 'ducks';\nimport {\n  eventsSelector,\n  eventTypesSelector,\n  personsSelector,\n  toponymsSelector,\n} from 'selectors';\nimport { editorDataPage } from 'App/routes';\nimport EventsTable from './EventsTable';\nimport EventForm from './EventForm';\nimport { addRoute, editRoute } from './routes';\n\nconst DataEditorPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [filter, setFilter] = useState('');\n\n  const eventTypes = useSelector(eventTypesSelector);\n  const persons = useSelector(personsSelector);\n  const toponyms = useSelector(toponymsSelector);\n  const events = useSelector(eventsSelector);\n\n  const eventsWithNestedData = useMemo(\n    () =>\n      events\n        .map((event) => ({\n          ...event,\n          type: eventTypes.find((type) => type.id === event.type),\n          persons: event.persons\n            ? event.persons.map((personId) =>\n                persons.find((person) => person.id === personId),\n              )\n            : [],\n          toponyms: event.toponyms\n            ? event.toponyms.map((toponymId) =>\n                toponyms.find((toponym) => toponym.id === toponymId),\n              )\n            : [],\n        }))\n        .filter((it) => it.name.toLowerCase().includes(filter.toLowerCase())),\n    [events, eventTypes, persons, toponyms, filter],\n  );\n\n  const onSelect = useCallback(\n    (value) => {\n      history.push(generatePath(editRoute, { id: value.id }));\n    },\n    [history],\n  );\n\n  const closeForm = useCallback(() => {\n    history.push(editorDataPage);\n  }, [history]);\n\n  const changeEvent = useCallback(\n    (value) => {\n      dispatch(\n        editEvent({\n          ...value,\n          endDate: value.endDate.toDate(),\n          startDate: value.startDate.toDate(),\n        }),\n      );\n      closeForm();\n      message.success('Событие успешно изменено');\n    },\n    [dispatch, closeForm],\n  );\n\n  const onDelete = useCallback(\n    (value) => {\n      dispatch(deleteEvent(value));\n    },\n    [dispatch],\n  );\n\n  const createEvent = useCallback(\n    (value) => {\n      dispatch(\n        addEvent({\n          ...value,\n          id: uniqueId(),\n          endDate: value.endDate.toDate(),\n          startDate: value.startDate.toDate(),\n        }),\n      );\n      closeForm();\n      message.success('Событие успешно добавлено');\n    },\n    [closeForm, dispatch],\n  );\n\n  const showAddForm = useCallback(() => {\n    history.push(addRoute);\n  }, [history]);\n\n  const contentForExportButton = useMemo(\n    () =>\n      JSON.stringify({\n        events,\n        eventTypes,\n        toponyms,\n        persons,\n      }),\n    [events, eventTypes, toponyms, persons],\n  );\n\n  return (\n    <Layout>\n      <PageHeader\n        ghost={false}\n        title={\n          <Input.Search\n            placeholder=\"Введите значение для поиска\"\n            onSearch={setFilter}\n            style={{ width: 400 }}\n            data-id=\"search\"\n          />\n        }\n        extra={\n          <>\n            <Button\n              data-id=\"export-button\"\n              download=\"events.json\"\n              href={URL.createObjectURL(\n                new Blob([contentForExportButton], {\n                  type: 'application/json',\n                }),\n              )}\n            >\n              <DownloadOutlined />\n              Экспортировать\n            </Button>\n            <Button type=\"primary\" onClick={showAddForm} data-id=\"add-button\">\n              Добавить\n            </Button>\n          </>\n        }\n      />\n      <Layout.Content>\n        <EventsTable\n          events={eventsWithNestedData}\n          eventTypes={eventTypes}\n          onSelect={onSelect}\n          deleteRow={onDelete}\n        />\n        <Route\n          path={addRoute}\n          render={() => (\n            <EventForm\n              onClose={closeForm}\n              onSubmit={createEvent}\n              title=\"Добавление события\"\n            />\n          )}\n        />\n        <Route\n          path={editRoute}\n          render={() => (\n            <EventForm\n              onClose={closeForm}\n              onSubmit={changeEvent}\n              title=\"Редактирование события\"\n            />\n          )}\n        />\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default DataEditorPage;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link, Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport { EditOutlined } from '@ant-design/icons';\nimport { loadEvents } from '../ducks';\nimport DataEditorPage from './DataEditorPage';\nimport { editorDataPage } from './routes';\n\nconst ROUTES = [editorDataPage];\n\nconst FULL_SLIDER_WIDTH = 240;\n\nconst App = () => {\n  const [collapsed, setCollapsed] = useState(true);\n  const dispatch = useDispatch();\n  const { pathname } = useLocation();\n\n  const selectedMenuKeys = useMemo(\n    () => [ROUTES.find((route) => route === pathname)],\n    [pathname],\n  );\n\n  useEffect(() => {\n    dispatch(loadEvents());\n  }, [dispatch]);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }} hasSider>\n      <Layout.Sider\n        theme=\"dark\"\n        collapsible\n        width={FULL_SLIDER_WIDTH}\n        collapsed={collapsed}\n        onCollapse={setCollapsed}\n        style={{\n          overflow: 'auto',\n          height: '100vh',\n          position: 'fixed',\n          left: 0,\n        }}\n      >\n        <Menu theme=\"dark\" mode=\"inline\" selectedKeys={selectedMenuKeys}>\n          <Menu.Item key={editorDataPage}>\n            <Link to={editorDataPage}>\n              <EditOutlined />\n              <span>Редактирование данных</span>\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </Layout.Sider>\n      <Layout\n        style={{\n          marginLeft: collapsed ? 80 : FULL_SLIDER_WIDTH,\n          transition: 'margin 0.2s',\n        }}\n      >\n        <Layout.Content>\n          <Switch>\n            <Route path={editorDataPage} component={DataEditorPage} />\n            <Redirect to={editorDataPage} />\n          </Switch>\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ConfigProvider } from 'antd';\nimport ruLocale from 'antd/lib/locale/ru_RU';\nimport store from './store';\nimport App from './App/App';\nimport './index.css';\n\nconst renderApp = () => (\n  <Router>\n    <Provider store={store}>\n      <ConfigProvider locale={ruLocale}>\n        <App />\n      </ConfigProvider>\n    </Provider>\n  </Router>\n);\n\nReactDOM.render(renderApp(), document.getElementById('root'));\n"],"sourceRoot":""}